Expression: (xa(xiy))iy
Encountered character '('. Legality status: 1.
000 of 010
Encountered character 'x'. Legality status: 2.
001 of 010
Encountered character 'a'. Legality status: 1.
002 of 010
Encountered character '('. Legality status: 1.
003 of 010
Encountered character 'x'. Legality status: 2.
004 of 010
Encountered character 'i'. Legality status: 1.
005 of 010
Encountered character 'y'. Legality status: 2.
006 of 010
Encountered character ')'. Legality status: 1.
007 of 010
Encountered character ')'. Legality status: 1.
008 of 010
Encountered character 'i'. Legality status: 1.
009 of 010
Encountered character 'y'. Legality status: 2.
010 of 010
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: a.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
List is not empty.
Found new variable: 'y'.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
All variables: x y 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Amount of variables: 2
All variables: xy
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: xa(xiy)iy
Encountered character 'x'. Legality status: 2.
000 of 008
Encountered character 'a'. Legality status: 1.
001 of 008
Encountered character '('. Legality status: 1.
002 of 008
Encountered character 'x'. Legality status: 2.
003 of 008
Encountered character 'i'. Legality status: 1.
004 of 008
Encountered character 'y'. Legality status: 2.
005 of 008
Encountered character ')'. Legality status: 1.
006 of 008
Encountered character 'i'. Legality status: 1.
007 of 008
Encountered character 'y'. Legality status: 2.
008 of 008
Finished.
List created.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: a.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
List is not empty.
Found new variable: 'y'.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
All variables: x y 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Amount of variables: 2
All variables: xy
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xiy)a!yi!x
Encountered character '('. Legality status: 1.
000 of 010
Encountered character 'x'. Legality status: 2.
001 of 010
Encountered character 'i'. Legality status: 1.
002 of 010
Encountered character 'y'. Legality status: 2.
003 of 010
Encountered character ')'. Legality status: 1.
004 of 010
Encountered character 'a'. Legality status: 1.
005 of 010
Encountered character '!'. Legality status: 1.
006 of 010
Encountered character 'y'. Legality status: 2.
007 of 010
Encountered character 'i'. Legality status: 1.
008 of 010
Encountered character '!'. Legality status: 1.
009 of 010
Encountered character 'x'. Legality status: 2.
010 of 010
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: a.
Testing.
Stepping. Moving on.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
All variables: x y 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.: YES; val.: i] --> NULL
Amount of variables: 2
All variables: xy
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: ((xiy)a!y)i!x
Encountered character '('. Legality status: 1.
000 of 012
Encountered character '('. Legality status: 1.
001 of 012
Encountered character 'x'. Legality status: 2.
002 of 012
Encountered character 'i'. Legality status: 1.
003 of 012
Encountered character 'y'. Legality status: 2.
004 of 012
Encountered character ')'. Legality status: 1.
005 of 012
Encountered character 'a'. Legality status: 1.
006 of 012
Encountered character '!'. Legality status: 1.
007 of 012
Encountered character 'y'. Legality status: 2.
008 of 012
Encountered character ')'. Legality status: 1.
009 of 012
Encountered character 'i'. Legality status: 1.
010 of 012
Encountered character '!'. Legality status: 1.
011 of 012
Encountered character 'x'. Legality status: 2.
012 of 012
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: a.
Testing.
Stepping. Moving on.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
All variables: x y 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.: YES; val.: i] --> NULL
Amount of variables: 2
All variables: xy
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: xex
Encountered character 'x'. Legality status: 2.
000 of 002
Encountered character 'e'. Legality status: 1.
001 of 002
Encountered character 'x'. Legality status: 2.
002 of 002
Finished.
List created.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> NULL
All variables: x 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 1
All variables: x
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xey)e(yex)
Encountered character '('. Legality status: 1.
000 of 010
Encountered character 'x'. Legality status: 2.
001 of 010
Encountered character 'e'. Legality status: 1.
002 of 010
Encountered character 'y'. Legality status: 2.
003 of 010
Encountered character ')'. Legality status: 1.
004 of 010
Encountered character 'e'. Legality status: 1.
005 of 010
Encountered character '('. Legality status: 1.
006 of 010
Encountered character 'y'. Legality status: 2.
007 of 010
Encountered character 'e'. Legality status: 1.
008 of 010
Encountered character 'x'. Legality status: 2.
009 of 010
Encountered character ')'. Legality status: 1.
010 of 010
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
All variables: x y 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: e] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 2
All variables: xy
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xey)a(yez)i(xez)
Encountered character '('. Legality status: 1.
000 of 016
Encountered character 'x'. Legality status: 2.
001 of 016
Encountered character 'e'. Legality status: 1.
002 of 016
Encountered character 'y'. Legality status: 2.
003 of 016
Encountered character ')'. Legality status: 1.
004 of 016
Encountered character 'a'. Legality status: 1.
005 of 016
Encountered character '('. Legality status: 1.
006 of 016
Encountered character 'y'. Legality status: 2.
007 of 016
Encountered character 'e'. Legality status: 1.
008 of 016
Encountered character 'z'. Legality status: 2.
009 of 016
Encountered character ')'. Legality status: 1.
010 of 016
Encountered character 'i'. Legality status: 1.
011 of 016
Encountered character '('. Legality status: 1.
012 of 016
Encountered character 'x'. Legality status: 2.
013 of 016
Encountered character 'e'. Legality status: 1.
014 of 016
Encountered character 'z'. Legality status: 2.
015 of 016
Encountered character ')'. Legality status: 1.
016 of 016
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: a.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: a] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: a] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
List is not empty.
Found new variable: 'z'.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
All variables: x y z 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: i] --> NULL
Amount of variables: 3
All variables: xyz
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: !(xey)e(!xey)
Encountered character '!'. Legality status: 1.
000 of 012
Encountered character '('. Legality status: 1.
001 of 012
Encountered character 'x'. Legality status: 2.
002 of 012
Encountered character 'e'. Legality status: 1.
003 of 012
Encountered character 'y'. Legality status: 2.
004 of 012
Encountered character ')'. Legality status: 1.
005 of 012
Encountered character 'e'. Legality status: 1.
006 of 012
Encountered character '('. Legality status: 1.
007 of 012
Encountered character '!'. Legality status: 1.
008 of 012
Encountered character 'x'. Legality status: 2.
009 of 012
Encountered character 'e'. Legality status: 1.
010 of 012
Encountered character 'y'. Legality status: 2.
011 of 012
Encountered character ')'. Legality status: 1.
012 of 012
Finished.
List created.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: !] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: !] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: !] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
All variables: x y 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 2
All variables: xy
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xny)e!(xey)
Encountered character '('. Legality status: 1.
000 of 011
Encountered character 'x'. Legality status: 2.
001 of 011
Encountered character 'n'. Legality status: 1.
002 of 011
Encountered character 'y'. Legality status: 2.
003 of 011
Encountered character ')'. Legality status: 1.
004 of 011
Encountered character 'e'. Legality status: 1.
005 of 011
Encountered character '!'. Legality status: 1.
006 of 011
Encountered character '('. Legality status: 1.
007 of 011
Encountered character 'x'. Legality status: 2.
008 of 011
Encountered character 'e'. Legality status: 1.
009 of 011
Encountered character 'y'. Legality status: 2.
010 of 011
Encountered character ')'. Legality status: 1.
011 of 011
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: !] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: !] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
All variables: x y 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.: YES; val.: !] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 2
All variables: xy
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: !(xnx)
Encountered character '!'. Legality status: 1.
000 of 005
Encountered character '('. Legality status: 1.
001 of 005
Encountered character 'x'. Legality status: 2.
002 of 005
Encountered character 'n'. Legality status: 1.
003 of 005
Encountered character 'x'. Legality status: 2.
004 of 005
Encountered character ')'. Legality status: 1.
005 of 005
Finished.
List created.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> NULL
All variables: x 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: n] --> [Op.: YES; val.: !] --> NULL
Amount of variables: 1
All variables: x
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xny)e(ynx)
Encountered character '('. Legality status: 1.
000 of 010
Encountered character 'x'. Legality status: 2.
001 of 010
Encountered character 'n'. Legality status: 1.
002 of 010
Encountered character 'y'. Legality status: 2.
003 of 010
Encountered character ')'. Legality status: 1.
004 of 010
Encountered character 'e'. Legality status: 1.
005 of 010
Encountered character '('. Legality status: 1.
006 of 010
Encountered character 'y'. Legality status: 2.
007 of 010
Encountered character 'n'. Legality status: 1.
008 of 010
Encountered character 'x'. Legality status: 2.
009 of 010
Encountered character ')'. Legality status: 1.
010 of 010
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: y] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
All variables: x y 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: n] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 2
All variables: xy
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: ((xey)ez)e(xe(yez)
Encountered character '('. Legality status: 1.
000 of 017
Encountered character '('. Legality status: 1.
001 of 017
Encountered character 'x'. Legality status: 2.
002 of 017
Encountered character 'e'. Legality status: 1.
003 of 017
Encountered character 'y'. Legality status: 2.
004 of 017
Encountered character ')'. Legality status: 1.
005 of 017
Encountered character 'e'. Legality status: 1.
006 of 017
Encountered character 'z'. Legality status: 2.
007 of 017
Encountered character ')'. Legality status: 1.
008 of 017
Encountered character 'e'. Legality status: 1.
009 of 017
Encountered character '('. Legality status: 1.
010 of 017
Encountered character 'x'. Legality status: 2.
011 of 017
Encountered character 'e'. Legality status: 1.
012 of 017
Encountered character '('. Legality status: 1.
013 of 017
Encountered character 'y'. Legality status: 2.
014 of 017
Encountered character 'e'. Legality status: 1.
015 of 017
Encountered character 'z'. Legality status: 2.
016 of 017
Encountered character ')'. Legality status: 1.
017 of 017
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
The given expression is invalid.

Expression: ((xey)ez)e(xe(yez))
Encountered character '('. Legality status: 1.
000 of 018
Encountered character '('. Legality status: 1.
001 of 018
Encountered character 'x'. Legality status: 2.
002 of 018
Encountered character 'e'. Legality status: 1.
003 of 018
Encountered character 'y'. Legality status: 2.
004 of 018
Encountered character ')'. Legality status: 1.
005 of 018
Encountered character 'e'. Legality status: 1.
006 of 018
Encountered character 'z'. Legality status: 2.
007 of 018
Encountered character ')'. Legality status: 1.
008 of 018
Encountered character 'e'. Legality status: 1.
009 of 018
Encountered character '('. Legality status: 1.
010 of 018
Encountered character 'x'. Legality status: 2.
011 of 018
Encountered character 'e'. Legality status: 1.
012 of 018
Encountered character '('. Legality status: 1.
013 of 018
Encountered character 'y'. Legality status: 2.
014 of 018
Encountered character 'e'. Legality status: 1.
015 of 018
Encountered character 'z'. Legality status: 2.
016 of 018
Encountered character ')'. Legality status: 1.
017 of 018
Encountered character ')'. Legality status: 1.
018 of 018
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
Found new variable: 'z'.
List is not empty.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
All variables: x y z 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: e] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 3
All variables: xyz
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: ((xny)nz)e(xn(ynz))
Encountered character '('. Legality status: 1.
000 of 018
Encountered character '('. Legality status: 1.
001 of 018
Encountered character 'x'. Legality status: 2.
002 of 018
Encountered character 'n'. Legality status: 1.
003 of 018
Encountered character 'y'. Legality status: 2.
004 of 018
Encountered character ')'. Legality status: 1.
005 of 018
Encountered character 'n'. Legality status: 1.
006 of 018
Encountered character 'z'. Legality status: 2.
007 of 018
Encountered character ')'. Legality status: 1.
008 of 018
Encountered character 'e'. Legality status: 1.
009 of 018
Encountered character '('. Legality status: 1.
010 of 018
Encountered character 'x'. Legality status: 2.
011 of 018
Encountered character 'n'. Legality status: 1.
012 of 018
Encountered character '('. Legality status: 1.
013 of 018
Encountered character 'y'. Legality status: 2.
014 of 018
Encountered character 'n'. Legality status: 1.
015 of 018
Encountered character 'z'. Legality status: 2.
016 of 018
Encountered character ')'. Legality status: 1.
017 of 018
Encountered character ')'. Legality status: 1.
018 of 018
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
Found new variable: 'z'.
List is not empty.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
All variables: x y z 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.: YES; val.: n] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 3
All variables: xyz
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: ((xny)ez)e(xn(yez))
Encountered character '('. Legality status: 1.
000 of 018
Encountered character '('. Legality status: 1.
001 of 018
Encountered character 'x'. Legality status: 2.
002 of 018
Encountered character 'n'. Legality status: 1.
003 of 018
Encountered character 'y'. Legality status: 2.
004 of 018
Encountered character ')'. Legality status: 1.
005 of 018
Encountered character 'e'. Legality status: 1.
006 of 018
Encountered character 'z'. Legality status: 2.
007 of 018
Encountered character ')'. Legality status: 1.
008 of 018
Encountered character 'e'. Legality status: 1.
009 of 018
Encountered character '('. Legality status: 1.
010 of 018
Encountered character 'x'. Legality status: 2.
011 of 018
Encountered character 'n'. Legality status: 1.
012 of 018
Encountered character '('. Legality status: 1.
013 of 018
Encountered character 'y'. Legality status: 2.
014 of 018
Encountered character 'e'. Legality status: 1.
015 of 018
Encountered character 'z'. Legality status: 2.
016 of 018
Encountered character ')'. Legality status: 1.
017 of 018
Encountered character ')'. Legality status: 1.
018 of 018
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
Found new variable: 'z'.
List is not empty.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
All variables: x y z 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.: YES; val.: n] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 3
All variables: xyz
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xnyez)e(xeynz)
Encountered character '('. Legality status: 1.
000 of 014
Encountered character 'x'. Legality status: 2.
001 of 014
Encountered character 'n'. Legality status: 1.
002 of 014
Encountered character 'y'. Legality status: 2.
003 of 014
Encountered character 'e'. Legality status: 1.
004 of 014
Encountered character 'z'. Legality status: 2.
005 of 014
Encountered character ')'. Legality status: 1.
006 of 014
Encountered character 'e'. Legality status: 1.
007 of 014
Encountered character '('. Legality status: 1.
008 of 014
Encountered character 'x'. Legality status: 2.
009 of 014
Encountered character 'e'. Legality status: 1.
010 of 014
Encountered character 'y'. Legality status: 2.
011 of 014
Encountered character 'n'. Legality status: 1.
012 of 014
Encountered character 'z'. Legality status: 2.
013 of 014
Encountered character ')'. Legality status: 1.
014 of 014
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: n.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: n] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
Found new variable: 'z'.
List is not empty.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
All variables: x y z 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: n] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: e] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: n] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 3
All variables: xyz
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xi(yiz))e(xiy)i(xiz)
Encountered character '('. Legality status: 1.
000 of 020
Encountered character 'x'. Legality status: 2.
001 of 020
Encountered character 'i'. Legality status: 1.
002 of 020
Encountered character '('. Legality status: 1.
003 of 020
Encountered character 'y'. Legality status: 2.
004 of 020
Encountered character 'i'. Legality status: 1.
005 of 020
Encountered character 'z'. Legality status: 2.
006 of 020
Encountered character ')'. Legality status: 1.
007 of 020
Encountered character ')'. Legality status: 1.
008 of 020
Encountered character 'e'. Legality status: 1.
009 of 020
Encountered character '('. Legality status: 1.
010 of 020
Encountered character 'x'. Legality status: 2.
011 of 020
Encountered character 'i'. Legality status: 1.
012 of 020
Encountered character 'y'. Legality status: 2.
013 of 020
Encountered character ')'. Legality status: 1.
014 of 020
Encountered character 'i'. Legality status: 1.
015 of 020
Encountered character '('. Legality status: 1.
016 of 020
Encountered character 'x'. Legality status: 2.
017 of 020
Encountered character 'i'. Legality status: 1.
018 of 020
Encountered character 'z'. Legality status: 2.
019 of 020
Encountered character ')'. Legality status: 1.
020 of 020
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
Found new variable: 'z'.
List is not empty.
List is not empty.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
All variables: x y z 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 3
All variables: xyz
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xi(yiz))e((xiy)i(xiz))
Encountered character '('. Legality status: 1.
000 of 022
Encountered character 'x'. Legality status: 2.
001 of 022
Encountered character 'i'. Legality status: 1.
002 of 022
Encountered character '('. Legality status: 1.
003 of 022
Encountered character 'y'. Legality status: 2.
004 of 022
Encountered character 'i'. Legality status: 1.
005 of 022
Encountered character 'z'. Legality status: 2.
006 of 022
Encountered character ')'. Legality status: 1.
007 of 022
Encountered character ')'. Legality status: 1.
008 of 022
Encountered character 'e'. Legality status: 1.
009 of 022
Encountered character '('. Legality status: 1.
010 of 022
Encountered character '('. Legality status: 1.
011 of 022
Encountered character 'x'. Legality status: 2.
012 of 022
Encountered character 'i'. Legality status: 1.
013 of 022
Encountered character 'y'. Legality status: 2.
014 of 022
Encountered character ')'. Legality status: 1.
015 of 022
Encountered character 'i'. Legality status: 1.
016 of 022
Encountered character '('. Legality status: 1.
017 of 022
Encountered character 'x'. Legality status: 2.
018 of 022
Encountered character 'i'. Legality status: 1.
019 of 022
Encountered character 'z'. Legality status: 2.
020 of 022
Encountered character ')'. Legality status: 1.
021 of 022
Encountered character ')'. Legality status: 1.
022 of 022
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: e.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: e] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
Found new variable: 'z'.
List is not empty.
List is not empty.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
All variables: x y z 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.: YES; val.: e] --> NULL
Amount of variables: 3
All variables: xyz
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xiy)i((zix)i(ziy))
Encountered character '('. Legality status: 1.
000 of 018
Encountered character 'x'. Legality status: 2.
001 of 018
Encountered character 'i'. Legality status: 1.
002 of 018
Encountered character 'y'. Legality status: 2.
003 of 018
Encountered character ')'. Legality status: 1.
004 of 018
Encountered character 'i'. Legality status: 1.
005 of 018
Encountered character '('. Legality status: 1.
006 of 018
Encountered character '('. Legality status: 1.
007 of 018
Encountered character 'z'. Legality status: 2.
008 of 018
Encountered character 'i'. Legality status: 1.
009 of 018
Encountered character 'x'. Legality status: 2.
010 of 018
Encountered character ')'. Legality status: 1.
011 of 018
Encountered character 'i'. Legality status: 1.
012 of 018
Encountered character '('. Legality status: 1.
013 of 018
Encountered character 'z'. Legality status: 2.
014 of 018
Encountered character 'i'. Legality status: 1.
015 of 018
Encountered character 'y'. Legality status: 2.
016 of 018
Encountered character ')'. Legality status: 1.
017 of 018
Encountered character ')'. Legality status: 1.
018 of 018
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
Found new variable: 'z'.
List is not empty.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
All variables: x y z 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: z] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Amount of variables: 3
All variables: xyz
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (xiy)i((yiz)i(xiz))
Encountered character '('. Legality status: 1.
000 of 018
Encountered character 'x'. Legality status: 2.
001 of 018
Encountered character 'i'. Legality status: 1.
002 of 018
Encountered character 'y'. Legality status: 2.
003 of 018
Encountered character ')'. Legality status: 1.
004 of 018
Encountered character 'i'. Legality status: 1.
005 of 018
Encountered character '('. Legality status: 1.
006 of 018
Encountered character '('. Legality status: 1.
007 of 018
Encountered character 'y'. Legality status: 2.
008 of 018
Encountered character 'i'. Legality status: 1.
009 of 018
Encountered character 'z'. Legality status: 2.
010 of 018
Encountered character ')'. Legality status: 1.
011 of 018
Encountered character 'i'. Legality status: 1.
012 of 018
Encountered character '('. Legality status: 1.
013 of 018
Encountered character 'x'. Legality status: 2.
014 of 018
Encountered character 'i'. Legality status: 1.
015 of 018
Encountered character 'z'. Legality status: 2.
016 of 018
Encountered character ')'. Legality status: 1.
017 of 018
Encountered character ')'. Legality status: 1.
018 of 018
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: z.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
List is not empty.
Found new variable: 'z'.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> NULL
All variables: x y z 
[Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: y] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.:  NO; val.: z] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Amount of variables: 3
All variables: xyz
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
Expression: (!xiy)a(!xi!y)ix
Encountered character '('. Legality status: 1.
000 of 015
Encountered character '!'. Legality status: 1.
001 of 015
Encountered character 'x'. Legality status: 2.
002 of 015
Encountered character 'i'. Legality status: 1.
003 of 015
Encountered character 'y'. Legality status: 2.
004 of 015
Encountered character ')'. Legality status: 1.
005 of 015
Encountered character 'a'. Legality status: 1.
006 of 015
Encountered character '('. Legality status: 1.
007 of 015
Encountered character '!'. Legality status: 1.
008 of 015
Encountered character 'x'. Legality status: 2.
009 of 015
Encountered character 'i'. Legality status: 1.
010 of 015
Encountered character '!'. Legality status: 1.
011 of 015
Encountered character 'y'. Legality status: 2.
012 of 015
Encountered character ')'. Legality status: 1.
013 of 015
Encountered character 'i'. Legality status: 1.
014 of 015
Encountered character 'x'. Legality status: 2.
015 of 015
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: a.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: !.
Testing.
Stepping. Moving on.
Current: operator 0; value: y.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: x.
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: !] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: a] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
Found new variable: 'x'.
List is not empty.
Found new variable: 'y'.
List is not empty.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.:  NO; val.: x] --> [Op.:  NO; val.: y] --> NULL
All variables: x y 
[Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: !] --> [Op.:  NO; val.: y] --> [Op.: YES; val.: !] --> [Op.: YES; val.: i] --> [Op.: YES; val.: a] --> [Op.:  NO; val.: x] --> [Op.: YES; val.: i] --> NULL
Amount of variables: 2
All variables: xy
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Is negation.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Finished.
