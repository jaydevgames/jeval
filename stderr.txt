Expression: ((dib)i(bic))i(dic)
Encountered character '('. Legality status: 1.
000 of 018
Encountered character '('. Legality status: 1.
001 of 018
Encountered character 'd'. Legality status: 2.
002 of 018
Encountered character 'i'. Legality status: 1.
003 of 018
Encountered character 'b'. Legality status: 2.
004 of 018
Encountered character ')'. Legality status: 1.
005 of 018
Encountered character 'i'. Legality status: 1.
006 of 018
Encountered character '('. Legality status: 1.
007 of 018
Encountered character 'b'. Legality status: 2.
008 of 018
Encountered character 'i'. Legality status: 1.
009 of 018
Encountered character 'c'. Legality status: 2.
010 of 018
Encountered character ')'. Legality status: 1.
011 of 018
Encountered character ')'. Legality status: 1.
012 of 018
Encountered character 'i'. Legality status: 1.
013 of 018
Encountered character '('. Legality status: 1.
014 of 018
Encountered character 'd'. Legality status: 2.
015 of 018
Encountered character 'i'. Legality status: 1.
016 of 018
Encountered character 'c'. Legality status: 2.
017 of 018
Encountered character ')'. Legality status: 1.
018 of 018
Finished.
List created.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: d.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: b.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: b.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: c.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 1; value: (.
Testing.
Stepping. Moving on.
Current: operator 0; value: d.
Testing.
Stepping. Moving on.
Current: operator 1; value: i.
Testing.
Stepping. Moving on.
Current: operator 0; value: c.
Testing.
Stepping. Moving on.
Current: operator 1; value: ).
Testing.
Stepping. Moving on.
Expression valid.
Started converting infix to postfix...
Finished preparations.
Started conversion...

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: Entity is empty. Printing [NULL].

[NULL] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: d] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Pushing left parenthesis.
Current operator stack: [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: d] --> NULL
Popping until encounter of a lesser operator.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: d] --> NULL
Appending variable.

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: d] --> [Op.:  NO; val.: c] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: [Op.: YES; val.: i] --> [Op.: YES; val.: (] --> NULL

Current postfix: [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: d] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> NULL
Popping until encounter of next left parenthesis.
Current operator stack: Received empty stack.

Stack is empty.
Finished succesfully.
Expression converted to postfix.

Evaluating...
Getting amount of variables...
List is not empty.
Found new variable: 'd'.
List is not empty.
Found new variable: 'b'.
List is not empty.
List is not empty.
Found new variable: 'c'.
List is not empty.
List is not empty.
Constructed temp list.
Temp list: [Op.: YES; val.: ÌU] --> [Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> NULL
All variables: d b c 
[Op.:  NO; val.: d] --> [Op.:  NO; val.: b] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: b] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> [Op.:  NO; val.: d] --> [Op.:  NO; val.: c] --> [Op.: YES; val.: i] --> [Op.: YES; val.: i] --> NULL
Amount of variables: 3
All variables: dbc
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 0.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is variable.
Moving on...
Parsing entity....
Is operator.
Moving on...
Parsing entity....
Is operator.
Moving on...
Finished. Value: 1.

Finished.
